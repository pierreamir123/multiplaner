# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'multii.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import icon_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QShortcut, QLabel, QSlider, QStyle, QSizePolicy, QFileDialog, QTableWidgetItem, QMessageBox
import numpy as np
from matplotlib.widgets import RangeSlider
import matplotlib.pyplot as plt
import matplotlib
from matplotlib.figure import Figure
from matplotlib.animation import FuncAnimation
import nibabel as nib
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
import sys
from main import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.widgets import Cursor
import matplotlib.lines as lines


matplotlib.use('Qt5Agg')

class draggable_lines:
    def __init__(self, ax, canva , canvas , volume_data , kind, XorY):
        self.axial =  canvas[0]
        self.sagital = canvas [1] 
        self.coronal = canvas [2]
        self.ax = ax
        self.c = canva
        self.o = kind
        self.XorY = XorY
        self.volume_data = volume_data

        
        if self.c == self.axial: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 , 512]
        elif self.c == self.coronal: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 ,234 ]
        elif self.c == self.sagital: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 , 234]

        
        self.line = lines.Line2D(x, y, picker=5, linewidth=2)
        self.ax.add_line(self.line)
        self.c.draw_idle()
        self.c.mpl_connect('pick_event', self.clickonline)

    def get_objects(self , arr):
        self.line_arr = arr

    
    def clickonline(self, event):
        if event.artist == self.line:
            print("line selected ", event.artist)
            self.follower = self.c.mpl_connect("motion_notify_event", self.followmouse)
            self.releaser = self.c.mpl_connect("button_press_event", self.releaseonclick)

    def followmouse(self, event):
        if self.o == "h":
            self.line.set_ydata([event.ydata, event.ydata])
            if self.c == self.axial: 
                self.on_press_axial(event)
            elif self.c == self.coronal: 
                self.on_press_coronal(event)
            elif self.c == self.sagital: 
                self.on_press_sagital(event)

        else:
            self.line.set_xdata([event.xdata, event.xdata])
            if self.c == self.axial: 
                self.on_press_axial(event)
            elif self.c == self.coronal: 
                self.on_press_coronal( event)
            elif self.c == self.sagital: 
                self.on_press_sagital(event)
        self.c.draw_idle()

    def releaseonclick(self, event):

        if self.o == "h":
            self.XorY = self.line.get_ydata()[0]
        else:
            self.XorY = self.line.get_xdata()[0]

        print (self.XorY)

        self.c.mpl_disconnect(self.releaser)
        self.c.mpl_disconnect(self.follower)
    def on_press_sagital(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        if self.o == "h":
            self.line_arr[4].line.set_ydata(y)
            self.axial.axes.imshow(
                self.volume_data[:, :, -y], cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.axial.draw()
            self.coronal.draw()

        
        else:
            self.line_arr[1].line.set_xdata(x)
            self.coronal.axes.imshow(
                np.rot90(self.volume_data[:,x , :]), cmap='gray', vmax=255, vmin=0 ,        origin='upper')
            self.coronal.draw()
            self.axial.draw()


    def on_press_coronal(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        if self.o == "h":
            self.line_arr[2].line.set_ydata(y)
            self.axial.axes.imshow(
                 
                self.volume_data[:, :, -y], cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.axial.draw()
            self.sagital.draw()

        else:
            self.line_arr[0].line.set_ydata(x)
            self.sagital.axes.imshow(
                np.rot90(self.volume_data[x,:, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.sagital.draw()
            self.axial.draw()


    def on_press_axial(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        
        if self.o == "h":
            # self.line_arr[5].line.set_ydata([event.xdata, event.xdata])
            self.line_arr[5].line.set_xdata(y)
            self.sagital.axes.imshow(
            np.rot90( self.volume_data[y, :, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.sagital.draw()
            self.coronal.draw()


        else:
            self.line_arr[3].line.set_xdata(x)
            # self.line_arr[4].line.set_ydata([event.ydata, event.ydata])
            self.coronal.axes.imshow(
                np.rot90(self.volume_data[:, x, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.coronal.draw()
            self.sagital.draw()

        
        



# class Cursor:
#     """
#     A cross hair cursor.
#     """
#     def __init__(self, ax):
#         self.ax = ax
#         self.horizontal_line = ax.axhline(color='w', lw=5, ls='--')
#         self.vertical_line = ax.axvline(color='w', lw=5, ls='--')
#         # text location in axes coordinates
#         self.text = ax.text(0.72, 0.9, '', transform=ax.transAxes)

#     def set_cross_hair_visible(self, visible):
#         need_redraw = self.horizontal_line.get_visible() != visible
#         self.horizontal_line.set_visible(visible)
#         self.vertical_line.set_visible(visible)
#         self.text.set_visible(visible)
#         return need_redraw

#     def on_mouse_move(self, event):
#         if not event.inaxes:
#             need_redraw = self.set_cross_hair_visible(True)
#             if need_redraw:
#                 self.ax.figure.canvas.draw()
#         else:
#             self.set_cross_hair_visible(True)
#             x, y = event.xdata, event.ydata
#             # update the line positions
#             self.horizontal_line.set_ydata(y)
#             self.vertical_line.set_xdata(x)
#             self.text.set_text('x=%1.2f, y=%1.2f' % (x, y))
#             self.ax.figure.canvas.draw()


class volume_viewer:

    def __init__(self, volume_data, interval, fig, ax):
        self.fig = fig
        self.ax = ax
        self.volume_data = np.array(volume_data)
        self.width, self.height, self.depth = volume_data.shape
        print(str(volume_data.shape))
        self.interval = interval

    def sagital_update(self, i):

        self.sagital.set_array(np.rot90((self.volume_data[:, :, i])))
        self.fig.canvas.draw()
        return self.sagital,

    def sagital_volume_show(self):
        plt.axis(False)
        plt.suptitle('sagital')
        self.ax.imshow(np.rot90(self.volume_data[:, :, 100]), cmap=plt.cm.gray)
        # sag_ani = FuncAnimation(self.fig, self.sagital_update, frames=range(self.depth),
        #                      interval=self.interval ,  blit=True)

    def cor_update(self, i):
        self.coronal.set_array(np.rot90((self.volume_data[i, :, :])))
        self.fig.canvas.draw()
        return self.coronal,

    def cor_volume_show(self):
        plt.axis(False)
        plt.suptitle('coronal')
        self.ax.imshow(self.volume_data[400, :, :], cmap=plt.cm.gray)
        # cor_ani = FuncAnimation(self.fig, self.cor_update, frames=range(self.width),
        #                      interval=self.interval ,  blit=True)

    def axial_update(self, i):

        self.axial.set_array(np.rot90((self.volume_data[:, 400, :])))
        self.fig.canvas.draw()
        return self.axial,

    def axial_volume_show(self):

        self.axial = self.ax.imshow(
            np.rot90(self.volume_data[:, 150, :]), cmap=plt.cm.gray)
        # axial_ani = FuncAnimation(self.fig, self.axial_update, frames=range(self.height),
        #                      interval=self.interval ,  blit=True)


class MatplotlibCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None):
        fig = Figure( dpi =140, facecolor='black')
        self.axes = fig.add_subplot(111)
        self.axes.spines['bottom'].set_color('white')
        self.axes.spines['top'].set_color('white')
        self.axes.spines['right'].set_color('white')
        self.axes.spines['left'].set_color('white')
        fig.tight_layout()
        super(MatplotlibCanvas, self).__init__(fig)
        


# class MatplotlibCanvas(FigureCanvasQTAgg): # class responsible of embed the matplotlib window in pyqt gui

#     def __init__(self,parent=None, dpi = 120):
#         fig = Figure(  dpi = 120 ,  facecolor="Black")
#         self.ax = fig.add_subplot(111)
#         super(MatplotlibCanvas,self).__init__(fig)
#         fig.tight_layout()
#         self.ff = 0

        # def __init__(self, qvlayout):
    #     # self.my_dpi = 141
    #     # self.fig  = plt.figure(facecolor="black")
    #     # # self.ax = self.fig1.add_subplot()
    #     # self.plot_layout = Canvas(self.fig)
    #     # qvlayout.addWidget(self.plot_layout)
    #     # # self.ax.get_xaxis().set_visible(False)
    #     # # self.ax.get_yaxis().set_visible(False)
    #     # self.fig.tight_layout()
    #     # self.ff = 0

    # def subplott(self,num):
    #     if num == 1:
    #         self.ax = self.fig.add_subplot()
    #         self.ax.axis(False)
    #         self.ax.spines['bottom'].set_color('white')
    #         self.ax.spines['top'].set_color('white')
    #         self.ax.spines['right'].set_color('white')
    #         self.ax.spines['left'].set_color('white')
    #         self.ax.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
    #         self.ax.tick_params(axis='y', colors='white')
    #         slider_ax = self.fig.add_axes([0.20, 0.1, 0.60, 0.03])
    #         slider = RangeSlider(slider_ax, "Threshold", 100, 150,dragging=True )
    #         lower_limit_line = self.ax.axvline(slider.val[0], color='w')
    #         upper_limit_line = self.ax.axhline(slider.val[1], color='w') #setting up Y-axis tick color to black
    #     elif num == 2 :
    #         self.ax1 = self.fig.add_subplot(1,2,1)
    #         self.ax1.spines['bottom'].set_color('white')
    #         self.ax1.spines['top'].set_color('white')
    #         self.ax1.spines['right'].set_color('white')
    #         self.ax1.spines['left'].set_color('white')
    #         self.ax1.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
    #         self.ax1.tick_params(axis='y', colors='white')

    #         self.ax2 = self.fig.add_subplot(1,2,2)
    #         self.ax2.spines['bottom'].set_color('white')
    #         self.ax2.spines['top'].set_color('white')
    #         self.ax2.spines['right'].set_color('white')
    #         self.ax2.spines['left'].set_color('white')
    #         self.ax2.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
    #         self.ax2.tick_params(axis='y', colors='white')

    #     # setting ax boarders colors with red

    # def draw(self):

    #     pass

    # def clear(self):
    #     self.fig.clear()

    # def figure_sizing(self , figsize ) :
    #     lenn , widd  = figsize
    #     figsize = (lenn/self.my_dpi , widd/self.my_dpi )
    #     self.ff = figsize
    #     self.fig.set_size_inches(self.ff)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1228, 873)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_14.addWidget(self.widget)
        self.verticalLayout_3.addLayout(self.horizontalLayout_14)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_3.addWidget(self.line)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_15.addWidget(self.widget_3)
        self.verticalLayout_3.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16.addLayout(self.verticalLayout_3)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_16.addWidget(self.line_2)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_4.addWidget(self.widget_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_2.addWidget(self.line_3)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.widget_4 = QtWidgets.QWidget(self.centralwidget)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_13.addWidget(self.widget_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_16.addLayout(self.verticalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout_16)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1228, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setToolTipDuration(0)
        self.toolBar.setMovable(True)
        self.toolBar.setIconSize(QtCore.QSize(50, 24))
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.Browse = QtWidgets.QAction(MainWindow)
        self.Browse.setCheckable(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/box.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Browse.setIcon(icon)
        self.Browse.setObjectName("Browse")
        self.clear = QtWidgets.QAction(MainWindow)
        self.clear.setCheckable(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/eraser.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clear.setIcon(icon1)
        self.clear.setObjectName("clear")
        self.actionaxis = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/axis.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionaxis.setIcon(icon2)
        self.actionaxis.setObjectName("actionaxis")
        self.actiontext_box = QtWidgets.QAction(MainWindow)
        self.actiontext_box.setObjectName("actiontext_box")
        self.action = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/marker.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action.setIcon(icon3)
        self.action.setObjectName("action")
        self.actionscreenshot = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/screenshot.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionscreenshot.setIcon(icon4)
        self.actionscreenshot.setObjectName("actionscreenshot")
        self.toolBar.addAction(self.Browse)
        self.toolBar.addAction(self.actiontext_box)
        self.toolBar.addAction(self.clear)
        self.toolBar.addAction(self.action)
        self.toolBar.addAction(self.actionaxis)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionscreenshot)

        self.axial = MatplotlibCanvas(self)
        self.axial.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.axial.axes.tick_params(axis='y', colors='white')
        self.axial.axes.set_title('Axial View',  y=1.0, pad=-14)

        self.axial.axes.title.set_color('white')

        self.sagital = MatplotlibCanvas(self)
        self.sagital.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.sagital.axes.tick_params(axis='y', colors='white')
        self.sagital.axes.set_title('Sagital View', x = 0.75 ,   y=-0.1, pad=-14)
        self.sagital.axes.title.set_color('white')

        self.coronal = MatplotlibCanvas(self)
        self.coronal.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.coronal.axes.tick_params(axis='y', colors='white')
        self.coronal.axes.set_title('Coronal View', x = 0.75 , y=1.0 ,pad=-14)
        self.coronal.axes.title.set_color('white')
        self.oblique = MatplotlibCanvas(self)

        # self.cursor = Cursor(self.axial.axes,  lw=1)
        # self.cursor_sagital = Cursor(self.sagital.axes,  lw=1)
        # self.cursor_coronal = Cursor(self.coronal.axes,  lw=1)
        # self.axial.mpl_connect("button_press_event", self.on_press_axial)
        # self.sagital.mpl_connect("button_press_event", self.on_press_sagital)
        # self.coronal.mpl_connect("button_press_event", self.on_press_coronal)
        # self.lineh = self.axial.axes.axhline(visible=False, color='red', lw=1)
        # self.linev = self.axial.axes.axvline(visible=False, color='red',  lw=1 )
        # self.lineh_sagital = self.sagital.axes.axhline(
        #     visible=False, color='red',  lw=1)
        # self.linev_sagital = self.sagital.axes.axvline(
        #     visible=False, color='red',  lw=1)
        
        # self.lineh_coronal = self.coronal.axes.axhline(
        #     visible=False, color='red',  lw=1)
        # self.linev_coronal = self.coronal.axes.axvline(
        #     visible=False, color='red',  lw=1)
        self.canvas_arr = [self.axial , self.sagital , self.coronal ]
        #self.linev = self.axial.axes.axvline(visible=False, color = 'red' )
        # self.axial.mpl_connect("button_release_event", self.on_release)
        # self.axial.mpl_connect("motion_notify_event", self.on_move)
        # self.axial.mpl_connect('motion_notify_event', self.cursor.on_mouse_move)

        # self.axial.subplott(1)
        # self.sagital.subplott(1)
        # self.coronal.subplott(1)
        
        self.volume_data = np.array([])
        self.Browse.triggered.connect(self.image_browsing)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.retranslateUi(MainWindow)

    def image_browsing(self):
        file_path = 0
        file_path = QFileDialog.getOpenFileName(
            filter=" NII (*.nii);;  DCM(*.dcm))")
        filename, file_extension = file_path
        img = nib.load(filename)
        self.volume_data = img.get_fdata()
        print(str(self.volume_data.shape))
        # self.volume_axial = volume_viewer(self.volume_data, 10 , self.axial.fig, self.axial.ax)
        # self.volume_coronal = volume_viewer(self.volume_data, 10 , self.coronal.fig, self.coronal.ax)
        # self.volume_sagital = volume_viewer(self.volume_data, 10 , self.sagital.fig, self.sagital.ax)
        self.axial.axes.imshow(
            self.volume_data[:, :, 90], cmap='gray', vmax=255, vmin=0 , origin='upper')
        self.sagital.axes.imshow(
           np.rot90(self.volume_data[0, :, :]), cmap='gray', vmax=255, vmin=0 , origin='lower')
        self.coronal.axes.imshow(
            np.rot90(self.volume_data[:,0 , :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
        self.axialhline_axial = draggable_lines(self.axial.axes ,self.axial , self.canvas_arr , self.volume_data ,"h", 200)
        self.axialvline_axial = draggable_lines(self.axial.axes ,self.axial , self.canvas_arr ,self.volume_data , "v", 200)
        self.axialhline_sagital = draggable_lines(self.sagital.axes ,self.sagital , self.canvas_arr ,self.volume_data , "h", 200)
        self.axialvline_sagital = draggable_lines(self.sagital.axes ,self.sagital , self.canvas_arr ,self.volume_data , "v", 200)
        self.axialhline_coronal = draggable_lines(self.coronal.axes ,self.coronal , self.canvas_arr ,self.volume_data , "h", 200)
        self.axialvline_coronal = draggable_lines(self.coronal.axes ,self.coronal , self.canvas_arr , self.volume_data ,"v", 200)
        self.drag_line_arr = [ self.axialhline_axial ,  self.axialvline_axial ,  self.axialhline_sagital ,  self.axialvline_sagital ,  self.axialhline_coronal ,  self.axialvline_coronal]
        for i in  self.drag_line_arr:
            i.get_objects( self.drag_line_arr)
        self.horizontalLayout_4.addWidget(self.sagital)
        self.horizontalLayout_15.addWidget(self.coronal)

        self.horizontalLayout_14.addWidget(self.axial)
        self.horizontalLayout_13.addWidget(self.oblique)
        self.axial.draw()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.Browse.setText(_translate("MainWindow", "browse"))
        self.Browse.setToolTip(_translate(
            "MainWindow", "<html><head/><body><p>Browse</p></body></html>"))
        self.clear.setText(_translate("MainWindow", "clear"))
        self.clear.setToolTip(_translate("MainWindow", "clear"))
        self.clear.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionaxis.setText(_translate("MainWindow", "axis"))
        self.actiontext_box.setText(_translate("MainWindow", "file"))
        self.actiontext_box.setToolTip(_translate(
            "MainWindow", "<html><head/><body><p><span style=\" font-weight:700; font-style:italic; color:#ffff;\">file</span></p></body></html>"))
        self.action.setText(_translate("MainWindow", "edit"))
        self.action.setToolTip(_translate("MainWindow", "edit"))
        self.actionscreenshot.setText(_translate("MainWindow", "screenshot"))


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
